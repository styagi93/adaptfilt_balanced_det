--lpm_decode DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_compare 2016:04:27:18:05:34:SJ cbx_lpm_decode 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


-- Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus Prime License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_2a7
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode243w[1..0]	: WIRE;
	w_anode252w[3..0]	: WIRE;
	w_anode269w[3..0]	: WIRE;
	w_anode279w[3..0]	: WIRE;
	w_anode289w[3..0]	: WIRE;
	w_anode299w[3..0]	: WIRE;
	w_anode309w[3..0]	: WIRE;
	w_anode319w[3..0]	: WIRE;
	w_anode329w[3..0]	: WIRE;
	w_anode341w[1..0]	: WIRE;
	w_anode348w[3..0]	: WIRE;
	w_anode359w[3..0]	: WIRE;
	w_anode369w[3..0]	: WIRE;
	w_anode379w[3..0]	: WIRE;
	w_anode389w[3..0]	: WIRE;
	w_anode399w[3..0]	: WIRE;
	w_anode409w[3..0]	: WIRE;
	w_anode419w[3..0]	: WIRE;
	w_data241w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode419w[3..3], w_anode409w[3..3], w_anode399w[3..3], w_anode389w[3..3], w_anode379w[3..3], w_anode369w[3..3], w_anode359w[3..3], w_anode348w[3..3]), ( w_anode329w[3..3], w_anode319w[3..3], w_anode309w[3..3], w_anode299w[3..3], w_anode289w[3..3], w_anode279w[3..3], w_anode269w[3..3], w_anode252w[3..3]));
	w_anode243w[] = ( (w_anode243w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode252w[] = ( (w_anode252w[2..2] & (! w_data241w[2..2])), (w_anode252w[1..1] & (! w_data241w[1..1])), (w_anode252w[0..0] & (! w_data241w[0..0])), w_anode243w[1..1]);
	w_anode269w[] = ( (w_anode269w[2..2] & (! w_data241w[2..2])), (w_anode269w[1..1] & (! w_data241w[1..1])), (w_anode269w[0..0] & w_data241w[0..0]), w_anode243w[1..1]);
	w_anode279w[] = ( (w_anode279w[2..2] & (! w_data241w[2..2])), (w_anode279w[1..1] & w_data241w[1..1]), (w_anode279w[0..0] & (! w_data241w[0..0])), w_anode243w[1..1]);
	w_anode289w[] = ( (w_anode289w[2..2] & (! w_data241w[2..2])), (w_anode289w[1..1] & w_data241w[1..1]), (w_anode289w[0..0] & w_data241w[0..0]), w_anode243w[1..1]);
	w_anode299w[] = ( (w_anode299w[2..2] & w_data241w[2..2]), (w_anode299w[1..1] & (! w_data241w[1..1])), (w_anode299w[0..0] & (! w_data241w[0..0])), w_anode243w[1..1]);
	w_anode309w[] = ( (w_anode309w[2..2] & w_data241w[2..2]), (w_anode309w[1..1] & (! w_data241w[1..1])), (w_anode309w[0..0] & w_data241w[0..0]), w_anode243w[1..1]);
	w_anode319w[] = ( (w_anode319w[2..2] & w_data241w[2..2]), (w_anode319w[1..1] & w_data241w[1..1]), (w_anode319w[0..0] & (! w_data241w[0..0])), w_anode243w[1..1]);
	w_anode329w[] = ( (w_anode329w[2..2] & w_data241w[2..2]), (w_anode329w[1..1] & w_data241w[1..1]), (w_anode329w[0..0] & w_data241w[0..0]), w_anode243w[1..1]);
	w_anode341w[] = ( (w_anode341w[0..0] & data_wire[3..3]), enable_wire);
	w_anode348w[] = ( (w_anode348w[2..2] & (! w_data241w[2..2])), (w_anode348w[1..1] & (! w_data241w[1..1])), (w_anode348w[0..0] & (! w_data241w[0..0])), w_anode341w[1..1]);
	w_anode359w[] = ( (w_anode359w[2..2] & (! w_data241w[2..2])), (w_anode359w[1..1] & (! w_data241w[1..1])), (w_anode359w[0..0] & w_data241w[0..0]), w_anode341w[1..1]);
	w_anode369w[] = ( (w_anode369w[2..2] & (! w_data241w[2..2])), (w_anode369w[1..1] & w_data241w[1..1]), (w_anode369w[0..0] & (! w_data241w[0..0])), w_anode341w[1..1]);
	w_anode379w[] = ( (w_anode379w[2..2] & (! w_data241w[2..2])), (w_anode379w[1..1] & w_data241w[1..1]), (w_anode379w[0..0] & w_data241w[0..0]), w_anode341w[1..1]);
	w_anode389w[] = ( (w_anode389w[2..2] & w_data241w[2..2]), (w_anode389w[1..1] & (! w_data241w[1..1])), (w_anode389w[0..0] & (! w_data241w[0..0])), w_anode341w[1..1]);
	w_anode399w[] = ( (w_anode399w[2..2] & w_data241w[2..2]), (w_anode399w[1..1] & (! w_data241w[1..1])), (w_anode399w[0..0] & w_data241w[0..0]), w_anode341w[1..1]);
	w_anode409w[] = ( (w_anode409w[2..2] & w_data241w[2..2]), (w_anode409w[1..1] & w_data241w[1..1]), (w_anode409w[0..0] & (! w_data241w[0..0])), w_anode341w[1..1]);
	w_anode419w[] = ( (w_anode419w[2..2] & w_data241w[2..2]), (w_anode419w[1..1] & w_data241w[1..1]), (w_anode419w[0..0] & w_data241w[0..0]), w_anode341w[1..1]);
	w_data241w[2..0] = data_wire[2..0];
END;
--VALID FILE
